// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int      @id @default(autoincrement())
  email       String   @unique
  phoneNumber String?
  hash        String
  salt        String
  events      Event[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("users")
}

model Event {
  id         Int      @id @default(autoincrement())
  name       String
  date       DateTime
  place      String
  discipline String
  status     String
  series     String
  user       User     @relation(fields: [userId], references: [id])
  userId     Int      @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("events")
}

model Table {
  id     String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  seats  Int
  status TableStatus
  order  Order[]

  @@map("tables")
}

model Waiter {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email       String     @unique
  phoneNumber String
  waiterName  String
  password    String
  role        WaiterRole

  orders Order[]

  @@map("waiter")
}

model Cook {
  id            String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  ageExperience Int
  cookName      String
  phoneNumber   String

  dishes Dish[]

  @@map("cooks")
}

model Customer {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  customerName String
  email        String @unique
  phoneNumber  String
  password     String

  orders Order[]

  @@map("customers")
}

model Dish {
  id           String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  dishName     String
  dishPrice    Int
  dishWaitTime Int

  cookId  String  @db.Uuid
  cook    Cook    @relation(fields: [cookId], references: [id])
  Order   Order?  @relation(fields: [orderId], references: [id])
  orderId String? @db.Uuid

  @@map("dishes")
}

model Order {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now())

  totalWaitTime Int
  status        OrderStatus
  totalPrice    Int
  tip           Int?

  customerId String   @db.Uuid
  customer   Customer @relation(fields: [customerId], references: [id])
  waiterId   String   @db.Uuid
  waiter     Waiter   @relation(fields: [waiterId], references: [id])
  tableId    String   @db.Uuid
  table      Table    @relation(fields: [tableId], references: [id])

  dishes Dish[]

  @@map("orders")
}

enum WaiterRole {
  ADMIN
  WAITER
}

enum TableStatus {
  TAKEN
  FREE
}

enum OrderStatus {
  DONE
  MAKING
}
